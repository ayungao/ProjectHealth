<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:security="http://www.springframework.org/schema/security"
       xmlns:http="http://www.springframework.org/schema/security"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/security http://www.springframework.org/schema/security/spring-security.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd">
    <!--
    【注意】在这个配置文件里，所有的路径必须是以/开头
    -->
    <!--  静态资源过滤
    pattern: 访问的路径，security=none 匿名访问，公开
    -->

    <security:http pattern="/css/**" security="none"/>
    <security:http pattern="/img/**" security="none"/>
    <security:http pattern="/js/**" security="none"/>
    <security:http pattern="/plugins/**" security="none"/>
    <security:http pattern="/login.html" security="none"/>
    <security:http pattern="/fail.html" security="none"/>
    <security:http pattern="/user/loginFail.do" security="none"/>
    <!--  拦截的规则
      auto-config: 自动装配，处理login页面，认证的处理....
      use-expressions: 是否使用spel表达式 与其下的intercept-url access 有关
            true: access的值可以为hasAnyRole hasAnyAuthority...
            hasRole会被前缀ROLE_
            hasAuthority不会补前缀
            false: 必须使用ROLE_打头的 角色 ROLE_大写
       intercept-url: 拦截url配置
       pattern: 拦截的匹配规则 /** 所有的
       access: 要访问必须具备有这个权限， 给拦截的url标定权限
       这里的意思：要访问/**,登陆用户必须拥有ROLE_ADMIN的角色
    -->
    <security:http auto-config="true" use-expressions="true">
        <!--只要认证通过就可以访问-->
        <security:intercept-url pattern="/**" access="isAuthenticated()"/>
        <!--  frame 前端中的页面嵌套规则  嵌套的页面与本网站同源     -->
        <security:headers>
            <security:frame-options policy="SAMEORIGIN"/>
        </security:headers>
        <!--   自定义登陆配置
        login-page: 指定登陆页面
        login-processing-url: 指定登陆处理的url
        username-parameter: 登陆请求时，传递过来的 用户名参数名  request.getParameter("abc") 获取页面填写的用户名
        password-parameter: 获取密码的参数名 request.getParameter("bcd") 获取页面填写的密码
        default-target-url: 登陆成功后默认跳转的url
        always-use-default-target: 为true时。不管是从哪个页面进入到登陆的，登陆成功后都跳转到 default-target-url
        -->
        <security:form-login
                login-page="/login.html"
                login-processing-url="/login.do"
                username-parameter="username"
                password-parameter="password"
                default-target-url="/user/loginSuccess.do"
                authentication-failure-url="/user/loginFail.do"
                always-use-default-target="true"/>
        <!--    关闭跨域访问限制    -->
        <security:csrf disabled="true"/>

        <!--    退出登陆的配置
        invalidate-session: 让session失效
        logout-url: 退出登陆的url
        logout-success-url: 退出成功后的跳转
        -->
        <security:logout invalidate-session="true" logout-url="/logout.do" logout-success-url="/login.html"/>
    </security:http>

    <!--  认证管理器  -->
    <security:authentication-manager>
        <!--  认证信息的提供者,认证的方式 提供登陆用户信息
             找容器中的user-service-ref: userService 这个对象来获取登陆用户信息
             userService 必须实现UserDetailsService接口， 且要让这个实现类进入spring容器
        -->
        <security:authentication-provider user-service-ref="springSecurityUserService">
            <!--   指定密码匹配器, 数据库的密码就不要加{bcrypt}         -->
            <security:password-encoder ref="encoder"/>
            <!--            <security:user-service>
                        在内存中写死一个用户信息
                               必须包含3个
                               name: 登陆用户名
                               password: 密码  {noop} 代表使用明文
                               authorities: 这个登陆用户所拥有的权限集合

                          <security:user name="admin" authorities="ROLE_ADMIN" password="{noop}admin"/>
                        </security:user-service>-->
        </security:authentication-provider>
    </security:authentication-manager>

    <!-- 开启权限控制注解支持   -->
    <security:global-method-security pre-post-annotations="enabled"/>

    <!--  注册userService  必须实现 UserDetailsService  -->

    <bean id="encoder" class="org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder"/>

</beans>